
#include <iostream> 
#include <vector> 
#include <queue> 
using namespace std; 
 
int main() { 
    ios_base::sync_with_stdio(false); 
    cin.tie(NULL); 
 
    int testCases; 
    cin >> testCases; 
 
    while (testCases--) { 
        int nodes, edges, queries; 
        cin >> nodes >> edges >> queries; 
 
        vector<vector<int>> adjList(nodes + 1); 
        queue<int> nodeQueue; 
        for (int i = 0; i < queries; i++) { 
            int u; 
            cin >> u; 
            nodeQueue.push(u); 
        } 
 
        queue<int> distQueue; 
        for (int i = 0; i < queries; i++) { 
            int dist; 
            cin >> dist; 
            distQueue.push(dist - 1); 
        } 
 
        while (edges--) { 
            int u, v; 
            cin >> u >> v; 
            adjList[u].push_back(v); 
            adjList[v].push_back(u); 
        } 
 
        vector<int> visited(nodes + 1); 
        vector<int> parentDistances(nodes + 1); 
        while (!nodeQueue.empty()) { 
            int node = nodeQueue.front(); 
            int distance = distQueue.front(); 
            nodeQueue.pop(); 
            distQueue.pop(); 
 
            if (visited[node] == 5) 
                continue; 
 
            visited[node] += 1; 
 
            if (distance != 0) { 
                for (int i : adjList[node]) { 
                    if (visited[i] != 5) { 
                        nodeQueue.push(i); 
                        distQueue.push(distance - 1); 
                    } 
                } 
            } 
        } 
 
        int flag = 0; 
        for (int i = 1; i <= nodes; i++) { 
            if (visited[i] == 0) { 
                flag = 1; 
            } 
        } 
 
        if (flag == 0) 
            cout << "YES\n"; 
        else 
            cout << "NO\n"; 
    } 
 
    return 0; 
}
